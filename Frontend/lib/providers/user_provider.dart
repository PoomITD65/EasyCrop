import 'dart:async';
import 'package:easycrop_e1/screen/home_screen.dart';
import 'package:easycrop_e1/services/api_service.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class UserProvider with ChangeNotifier {
  final ApiService _apiService = ApiService();
  final FirebaseAuth _auth = FirebaseAuth.instance;
  StreamSubscription? _authSubscription;

  // State ‡∏ó‡∏µ‡πà AuthWrapper ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
  User? _user;

  Map<String, dynamic>? _userData;
  String? _token;
  bool _isLoading = false;

  // Getters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ UI ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ
  User? get user => _user;
  Map<String, dynamic>? get userData => _userData;
  String? get token => _token;
  bool get isLoading => _isLoading;

  // Constructor: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà Provider ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
  UserProvider() {
    print("üîë USER PROVIDEoooooooo");
    _authSubscription = _auth.authStateChanges().listen(_handleAuthStateChanged);
    print("üîë USER PROVIDER INITIALIZED");
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Login ‡∏´‡∏£‡∏∑‡∏≠ Logout ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  void _handleAuthStateChanged(User? firebaseUser) {
    _user = firebaseUser;
    print("hhhhhhhhhhhh firebaseUser: $firebaseUser");
    if (firebaseUser != null) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ login ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      fetchUserData();
      
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ logout ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      clearUserData();
    }
    // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô UI (‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ AuthWrapper) ‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ User ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    notifyListeners();
  }

  @override
  void dispose() {
    _authSubscription?.cancel(); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
    super.dispose();
  }

  @override
  void notifyListeners() {
    super.notifyListeners();
    print("üîë USER PROVIDER NOTIFY LISTENERS");
  }
  @override
  void setState(VoidCallback fn) {
    print("üîë USER PROVIDER SET STATE");
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å _handleAuthStateChanged
  Future<void> fetchUserData() async {
    _isLoading = true;
    notifyListeners();
    print("üîë USER DATA===: $_userData");
    try {
      final user = _auth.currentUser;
      if (user == null) throw Exception("User not logged in");
      
      final token = await user.getIdToken();
      _token = token;
      _userData = await _apiService.getUserData(user.uid, token: token!);
      print("üîë USER DATA: $_userData");
    } catch (e, stackTrace) {
      print("‚ÄºÔ∏è FETCH USER DATA FAILED: $e");
      print("STACK TRACE: $stackTrace");
      _userData = null;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void clearUserData() {
    _userData = null;
    _token = null;
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á notifyListeners() ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ _handleAuthStateChanged ‡∏ó‡∏≥‡πÅ‡∏•‡πâ‡∏ß
  }
}
